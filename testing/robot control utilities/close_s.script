def close_s():
  modbus_add_signal("169.254.222.138", 255, 420, 3, "MODBUS_1", False)
  modbus_set_signal_update_frequency("MODBUS_1", 125)
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  modbus_set_runstate_dependent_choice("MODBUS_1",0)
  set_tcp(p[0.0,0.0,0.19,0.0,0.0,0.0])
  set_payload(1.0)
  set_gravity([0.0, 0.0, 9.82])
  of_sensor_IP = "10.20.0.15"
  of_robot_type = 3
  ACT = 1
  GTO = 2
  ATR = 3
  ARD = 4
  FOR = 5
  SPE = 6
  OBJ = 7
  STA = 8
  FLT = 9
  POS = 10
  PRE = 11
  def rq_init_connection(gripper_sid=9, gripper_socket="1"):
  	socket_open("127.0.0.1",63352, gripper_socket)
  	socket_set_var("SID", gripper_sid,  gripper_socket)
  	ack = socket_read_byte_list(3, gripper_socket)
  end
  def rq_set_sid(gripper_sid=9, gripper_socket="1"):
          socket_set_var("SID", gripper_sid,  gripper_socket)
          sync()
          return is_ack(socket_read_byte_list(3, gripper_socket))
  end
  def rq_activate(gripper_socket="1"):
  	rq_gripper_act = 0
      if (not rq_is_gripper_activated(gripper_socket)):
         rq_reset(gripper_socket)
         while(socket_get_var("ACT",gripper_socket) == 1):
            sleep(0.1)
            rq_reset(gripper_socket)
         end
      end
  	rq_set_var(ACT,1, gripper_socket)
  end
  def rq_activate_and_wait(gripper_socket="1"):
  	rq_activate(gripper_socket)
  	while(not rq_is_gripper_activated(gripper_socket)):
  	end
  end
  def rq_stop(gripper_socket="1"):
  	rq_set_var(GTO,0, gripper_socket)
  end
  def rq_reset(gripper_socket="1"):
  	rq_gripper_act = 0
  	rq_obj_detect = 0
  	rq_mov_complete = 0
  	rq_set_var(ACT,0, gripper_socket)
  	rq_set_var(ATR,0, gripper_socket)
  end
  def rq_auto_release_open_and_wait(gripper_socket="1"):
  	rq_set_var(ARD,0, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  def rq_auto_release_close_and_wait(gripper_socket="1"):
  	rq_set_var(ARD,1, gripper_socket)
  	rq_set_var(ACT,1, gripper_socket)
  	rq_set_var(ATR,1, gripper_socket)
  	gFLT = rq_get_var(FLT, 2, gripper_socket)
  	while(not is_FLT_autorelease_completed(gFLT)):
  		gFLT = rq_get_var(FLT, 2, gripper_socket)
  	end
  end
  def rq_set_force(force, gripper_socket="1"):
  	rq_set_var(FOR,force, gripper_socket)
  end
  def rq_set_speed(speed, gripper_socket="1"):
  	rq_set_var(SPE,speed, gripper_socket)
  end
  def rq_open(gripper_socket="1"):
  	rq_move(0, gripper_socket)
  end
  def rq_close(gripper_socket="1"):
  	rq_move(255, gripper_socket)
  end
  def rq_open_and_wait(gripper_socket="1"):
  	rq_move_and_wait(0, gripper_socket)
  end
  def rq_close_and_wait(gripper_socket="1"):
  	rq_move_and_wait(255, gripper_socket)
  end
  def rq_move(pos, gripper_socket="1"):
  	rq_mov_complete = 0
  	rq_obj_detect = 0
  	rq_set_pos(pos, gripper_socket)
  	rq_go_to(gripper_socket)
  end
  def rq_move_and_wait(pos, gripper_socket="1"):
  	rq_move(pos, gripper_socket)
  	while (not rq_is_motion_complete(gripper_socket)):
  		sleep(0.01)
  		sync()
  	end
  	rq_is_object_detected(gripper_socket)
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  def rq_wait_for_pos(pos, gripper_socket="1"):
  	gPRE = rq_get_var(PRE, 3, gripper_socket)
  	pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  	while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
  		gPRE = rq_get_var(PRE, 3, gripper_socket)
  		pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  		sync()
  	end
      while (not rq_is_motion_complete(gripper_socket)):
  		sleep(0.01)
  		sync()
  	end
  	rq_is_object_detected(gripper_socket)
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  def rq_wait(gripper_socket="1"):
      while (not rq_is_motion_complete(gripper_socket)):
  		sleep(0.01)
  		sync()
  	end
  	rq_is_object_detected(gripper_socket)
  	if (rq_obj_detect != 1):
  		rq_mov_complete = 1
  	end
  end
  def rq_go_to(gripper_socket="1"):
  	rq_set_var(GTO,1, gripper_socket)
  end
  def rq_set_pos(pos, gripper_socket="1"):
  	rq_set_var(POS, pos, gripper_socket)
  	gPRE = rq_get_var(PRE, 3, gripper_socket)
  	pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  	while (pre != pos):
          rq_set_var(POS, pos, gripper_socket)
  		gPRE = rq_get_var(PRE, 3, gripper_socket)
  		pre = (gPRE[1] - 48)*100 + (gPRE[2] -48)*10 + gPRE[3] - 48
  		sync()
  	end
  end
  def rq_set_pos_spd_for(pos, speed, force, gripper_socket="1"):
     rq_send_pos_spd_for(pos, speed, force, gripper_socket)
     ack = socket_read_byte_list(3, gripper_socket)
     while(is_not_ack(ack)):
        rq_send_pos_spd_for(pos, speed, force, gripper_socket)
     	  ack = socket_read_byte_list(3, gripper_socket)
     end
  end
  def rq_send_pos_spd_for(pos, speed, force, gripper_socket="1"):
     socket_send_string("SET POS", gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string(pos, gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string("SPE", gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string(speed, gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string("FOR", gripper_socket)
     socket_send_byte(32, gripper_socket)
     socket_send_string(force, gripper_socket)
     socket_send_byte(10, gripper_socket)
  end
  def rq_is_motion_complete(gripper_socket="1"):
  	rq_mov_complete = 0
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  	sleep(0.01)
  	if (is_OBJ_gripper_at_position(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  	if (is_OBJ_object_detected(gOBJ)):
  		rq_mov_complete = 1
  		return True
  	end
  	return False
  end
  def rq_is_gripper_activated(gripper_socket="1"):
  	gSTA = rq_get_var(STA, 1, gripper_socket)
  	if(is_STA_gripper_activated(gSTA)):
  		rq_gripper_act = 1
  		return True
  	else:
  		rq_gripper_act = 0
  		return False
  	end
  end
  def rq_is_object_detected(gripper_socket="1"):
  	gOBJ = rq_get_var(OBJ, 1, gripper_socket)
  	if(is_OBJ_object_detected(gOBJ)):
  		rq_obj_detect = 1
  		return True
  	else:
  		rq_obj_detect = 0
  		return False
  	end
  end
  def rq_current_pos(gripper_socket="1"):
  	rq_pos = socket_get_var("POS",gripper_socket)
  	sync()
      return rq_pos
  end
  def rq_motor_current(gripper_socket="1"):
  	rq_current = socket_get_var("COU",gripper_socket)
  	sync()
      return rq_current * 10
  end
  def is_ack(list_of_bytes):
  	if (list_of_bytes[0] != 3):
  		return False
  	end
  	if (list_of_bytes[1] != 97):
  		return False
  	end
  	if (list_of_bytes[2] != 99):
  		return False
  	end
  	if (list_of_bytes[3] != 107):
  		return False
  	end
  	return True
  end
  def is_not_ack(list_of_bytes):
  	if (is_ack(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  def is_STA_gripper_activated (list_of_bytes):
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  	return False
  end
  def is_OBJ_object_detected (list_of_bytes):
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  	if (list_of_bytes[1] == 50):
  		return True
  	end
  	if (list_of_bytes[1]  == 49):
  		return True
  	end
  	return False
  end
  def is_OBJ_gripper_at_position (list_of_bytes):
  	if (list_of_bytes[0] != 1):
  		return False
  	end
  	if (list_of_bytes[1] == 51):
  		return True
  	end
  	return False
  end
  def is_not_OBJ_gripper_at_position (list_of_bytes):
  	if (is_OBJ_gripper_at_position(list_of_bytes)):
  		return False
  	else:
  		return True
  	end
  end
  def is_FLT_no_fault(list_of_bytes):
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  	if (list_of_bytes[2] != 48):
  		return False
  	end
  	return True
  end
  def is_FLT_action_delayed(list_of_bytes):
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  	return True
  end
  def is_FLT_not_activated(list_of_bytes):
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  	if (list_of_bytes[1] != 48):
  		return False
  	end
  	if (list_of_bytes[2] != 55):
  		return False
  	end
  	return True
  end
  def is_FLT_autorelease_in_progress(list_of_bytes):
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  	if (list_of_bytes[2] != 49):
  		return False
  	end
  	return True
  end
  def is_FLT_overcurrent(list_of_bytes):
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  	if (list_of_bytes[2] != 52):
  		return False
  	end
  	return True
  end
  def is_FLT_autorelease_completed(list_of_bytes):
  	if (list_of_bytes[0] != 2):
  		return False
  	end
  	if (list_of_bytes[1] != 49):
  		return False
  	end
  	if (list_of_bytes[2] != 53):
  		return False
  	end
  	return True
  end
  def rq_set_var(var_name, var_value, gripper_socket="1"):
  	sync()
  	if (var_name == ACT):
  		socket_set_var("ACT", var_value, gripper_socket)
  	elif (var_name == GTO):
  		socket_set_var("GTO", var_value, gripper_socket)
  	elif (var_name == ATR):
  		socket_set_var("ATR", var_value, gripper_socket)
  	elif (var_name == ARD):
  		socket_set_var("ARD", var_value, gripper_socket)
  	elif (var_name == FOR):
  		socket_set_var("FOR", var_value, gripper_socket)
  	elif (var_name == SPE):
  		socket_set_var("SPE", var_value, gripper_socket)
  	elif (var_name == POS):
  		socket_set_var("POS", var_value, gripper_socket)
  	else:
  	end
      sync()
  	ack = socket_read_byte_list(3, gripper_socket)
  	sync()
  	while(is_not_ack(ack)):
  		textmsg("Retry in rq_set_var")
  		textmsg("rq_set_var : retry", " ...")
  		textmsg("rq_set_var : var_name = ", var_name)
  		textmsg("rq_set_var : var_value = ", var_value)
  		if (ack[0] != 0):
  			textmsg("rq_set_var : invalid ack value = ", ack)
  		end
  		socket_set_var(var_name , var_value,gripper_socket)
  		sync()
  		ack = socket_read_byte_list(3, gripper_socket)
  		sync()
  	end
  end
  def rq_get_var(var_name, nbr_bytes, gripper_socket="1"):
  	if (var_name == FLT):
  		socket_send_string("GET FLT",gripper_socket)
  		sync()
  	elif (var_name == OBJ):
  		socket_send_string("GET OBJ",gripper_socket)
  		sync()
  	elif (var_name == STA):
  		socket_send_string("GET STA",gripper_socket)
  		sync()
  	elif (var_name == PRE):
  		socket_send_string("GET PRE",gripper_socket)
  		sync()
  	else:
  	end
  	var_value = socket_read_byte_list(nbr_bytes, gripper_socket)
  	sync()
  	return var_value
  end
  def rq_is_object_validated(gripper_selected, gripper_socket="1"):
  	if(gripper_selected):
  		if(rq_is_object_detected(gripper_socket)):
  		    return True
  		else:
  		    return False
  		end
  	else:
  		return True
  	end
  end
  def rq_set_force_norm(force_norm, gripper_socket="1"):
      force_gripper = norm_to_gripper(force_norm)
      rq_set_force(force_gripper, gripper_socket)
  end
  def rq_set_speed_norm(speed_norm, gripper_socket="1"):
      speed_gripper = norm_to_gripper(speed_norm)
      rq_set_speed(speed_gripper, gripper_socket)
  end
  def rq_move_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move(pos_gripper, gripper_socket)
  end
  def rq_move_and_wait_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_move_and_wait(pos_gripper, gripper_socket)
  end
  def rq_set_pos_norm(pos_norm, gripper_socket="1"):
      pos_gripper = norm_to_gripper(pos_norm)
      rq_set_pos(pos_gripper, gripper_socket)
  end
  def rq_current_pos_norm(gripper_socket="1"):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_norm = gripper_to_norm(pos_gripper)
      return pos_norm
  end
  def gripper_to_norm(value_gripper):
      value_norm = (value_gripper / 255) * 100
      return floor(value_norm)
  end
  def norm_to_gripper(value_norm):
      value_gripper = (value_norm / 100) * 255
      return ceil(value_gripper)
  end
  def rq_get_position():
      return rq_current_pos_norm()
  end
  gripper_closed_norm = [100, 100, 100, 100]
  gripper_open_norm = [0, 0, 0, 0]
  gripper_closed_mm = [0, 0, 0, 0]
  gripper_open_mm = [50, 50, 50, 50]
  def rq_current_pos_mm(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      return round_value_2_dec(pos_mm)
  end
  def rq_current_pos_inches(gripper_socket=1):
      pos_gripper = rq_current_pos(gripper_socket)
      pos_mm = gripper_to_mm(pos_gripper, gripper_socket)
      pos_in = pos_mm / 25.4
      return round_value_2_dec(pos_in)
  end
  def get_closed_norm(gripper_socket):
      return gripper_closed_norm[gripper_socket - 1]
  end
  def get_open_norm(gripper_socket):
      return gripper_open_norm[gripper_socket - 1]
  end
  def get_closed_mm(gripper_socket):
      return gripper_closed_mm[gripper_socket - 1]
  end
  def get_open_mm(gripper_socket):
      return gripper_open_mm[gripper_socket - 1]
  end
  def set_closed_norm(closed_norm, gripper_socket):
      gripper_closed_norm[gripper_socket - 1] = closed_norm
  end
  def set_open_norm(open_norm, gripper_socket):
      gripper_open_norm[gripper_socket - 1] = open_norm
  end
  def set_closed_mm(closed_mm, gripper_socket):
      gripper_closed_mm[gripper_socket - 1] = closed_mm
  end
  def set_open_mm(open_mm, gripper_socket):
      gripper_open_mm[gripper_socket - 1] = open_mm
  end
  def gripper_to_mm(value_gripper, gripper_socket):
      closed_norm = get_closed_norm(gripper_socket)
      open_norm = get_open_norm(gripper_socket)
      closed_mm = get_closed_mm(gripper_socket)
      open_mm = get_open_mm(gripper_socket)
      value_norm = (value_gripper / 255) * 100
      slope = (closed_mm - open_mm) / (closed_norm - open_norm)
      value_mm = slope * (value_norm - closed_norm) + closed_mm
      if (value_mm > open_mm):
      	value_mm_limited = open_mm
      elif (value_mm < closed_mm):
      	value_mm_limited = closed_mm
      else:
          value_mm_limited = value_mm
      end
      return value_mm_limited
  end
  def round_value(value):
      value_mod = value % 1
  	if(value_mod < 0.5):
  		return floor(value)
  	else:
  		return ceil(value)
  	end
  end
  def round_value_2_dec(value):
      value_x_100 = value * 100
      value_x_100_rounded = round_value(value_x_100)
      return value_x_100_rounded / 100
  end
  rq_obj_detect = 0
  rq_init_connection(9, "1")
  connectivity_checked = [-1,-1,-1,-1]
  status_checked = [-1,-1,-1,-1]
  current_speed = [-1,-1,-1,-1]
  current_force = [-1,-1,-1,-1]
  set_closed_norm(100.0,1)
  set_open_norm(0.0, 1)
  set_closed_mm(0.0, 1)
  set_open_mm(50.0, 1)
  set_closed_norm(100.0,2)
  set_open_norm(0.0, 2)
  set_closed_mm(0.0, 2)
  set_open_mm(50.0, 2)
  set_closed_norm(100.0,3)
  set_open_norm(0.0, 3)
  set_closed_mm(0.0, 3)
  set_open_mm(50.0, 3)
  set_closed_norm(100.0,4)
  set_open_norm(0.0, 4)
  set_closed_mm(0.0, 4)
  set_open_mm(50.0, 4)
  $ 1 "Robot Program"
  $ 2 "rq_activate()"
  rq_activate()
  $ 3 "rq_close()"
  rq_close()
end